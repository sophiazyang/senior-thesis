---
title: "traditional_students"
format: pdf
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(viridis)
library(lme4)
library(glmnet)
library(pROC)
library(tidymodels)
library(rsample)

```

```{r}
df <- readRDS("data/model_df.rds")
```

```{r}
set.seed(123)
split <- group_initial_split(df, group = masked_student_ID, prop = 0.8)
train_df <- training(split)
test_df  <- testing(split)

# want to predict on new students (no data leakage about students)
```

```{r}
su_recipe <- recipe(is_SU ~ term_units + prev_semGPA + num_plans +
                      studied_away + took_summer_courses +
                      is_art_humanity + is_social_sci + is_natural_sci +
                      student_group + timeperiod + academic_level_bot +
                      catalog_level + semester_num + division +
                      max_units + num_students + did_indep_study +
                      num_overloads,
                    data = train_df) |>
  step_mutate(
    studied_away = if_else(is.na(studied_away), FALSE, studied_away),
    prev_semGPA  = if_else(is.na(prev_semGPA), 4, prev_semGPA),
    unknown      = is.na(is_art_humanity)
  ) |>
  step_impute_median(all_numeric_predictors()) |>  # median imputation for numeric
  step_impute_mode(all_nominal_predictors()) |>    # mode imputation for factors
  step_dummy(all_nominal_predictors()) |>          # one-hot encode factors
  step_normalize(all_numeric_predictors()) |>      # center + scale automatically
  step_zv(all_predictors()) |>
  step_smote(is_SU)
```

```{r}
lasso_spec <- logistic_reg(
  mode = "classification",
  penalty = tune(),  # lambda
  mixture = 1        # 1 = LASSO
) |>
  set_engine("glmnet")

lasso_workflow <- workflow() |>
  add_model(lasso_spec) |>
  add_recipe(su_recipe)

folds <- vfold_cv(train_df, v = 5, strata = is_SU)

lasso_tuned <- tune_grid(
  lasso_workflow,
  resamples = folds,
  grid = 30
)
best_lambda <- select_best(lasso_tuned, "roc_auc")
final_lasso <- finalize_workflow(lasso_workflow, best_lambda)
lasso_fit <- fit(final_lasso, data = train_df)

lasso_fit |>
  extract_fit_parsnip() |>
  tidy() |>
  filter(estimate != 0)

```

```{r}
glm_model <- glm(
  is_SU ~ term_units_c + prev_semGPA_c + studied_away +
    took_summer_courses + is_art_humanity + is_social_sci + unknown + semester_num + timeperiod,
  data = train_df,
  family = binomial
)

summary(glm_model)
```

```{r}
exp(coef(glm_model))
exp(confint(glm_model))
```

```{r}
# Evaluate performance
test_df$pred_prob <- predict(glm_model, newdata = test_df, type = "response")

roc_obj <- roc(test_df$is_SU, test_df$pred_prob)
auc(roc_obj)
```

```{r}
library(lme4)
glmm_model <- glmer(is_SU ~ term_units_c + prev_semGPA_c + early_grad + studied_away +
        took_summer_courses + is_art_humanity + is_social_sci + unknown +
        semester_num + timeperiod + (1 | masked_student_ID),
      data = train_df, family = binomial)
```
