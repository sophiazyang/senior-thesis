---
title: "traditional_students"
format: pdf
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(viridis)
library(lme4)
library(glmnet)
library(pROC)
```

```{r}
df <- readRDS("data/model_df.rds")
```

```{r}
df_clean <- df |>
  # Fill NAs for studied_away
  mutate(studied_away = if_else(is.na(studied_away), FALSE, studied_away),
         # Center numeric variables
         term_units_c = term_units - mean(term_units, na.rm = TRUE),
         prev_semGPA_c = if_else(is.na(prev_semGPA),
                                 4,  # neutral effect for first-semester
                                 prev_semGPA - mean(prev_semGPA, na.rm = TRUE)),
         num_plans_c = num_plans - mean(num_plans, na.rm = TRUE),
         total_overloads_c = total_overloads - mean(total_overloads, na.rm = TRUE),
         semester_num_c = semester_num - mean(semester_num, na.rm = TRUE),
         # Create unknown indicator
         unknown = if_else(is.na(is_art_humanity), TRUE, FALSE),
          # Replace NAs in division indicator columns with 0
         is_art_humanity = if_else(is.na(is_art_humanity), 0, is_art_humanity),
         is_social_sci   = if_else(is.na(is_social_sci), 0, is_social_sci),
         is_natural_sci  = if_else(is.na(is_natural_sci), 0, is_natural_sci),
         )
  # Convert categorical variables to factors
  # mutate(across(c(division, student_group), as.factor)) 
```

```{r}
set.seed(123)
student_ids <- unique(df_clean$masked_student_ID)
train_ids <- sample(student_ids, size = 0.8 * length(student_ids))

train_df <- df_clean |> filter(masked_student_ID %in% train_ids)
test_df  <- df_clean |> filter(!masked_student_ID %in% train_ids)
```

```{r}
predictors <- c("term_units_c", "prev_semGPA_c", "num_plans_c",
                "studied_away", "took_summer_courses", "is_art_humanity",
                "is_social_sci", "is_natural_sci", "unknown", "student_group",
                "timeperiod", "academic_level_bot", "catalog_level",
                "semester_num_c", "division", "max_units", "num_students",
                "did_indep_study", "num_overloads")

train_clean <- train_df |>
  select(is_SU, all_of(predictors))

X_train <- model.matrix(is_SU ~ ., train_clean)[,-1]
y_train <- train_clean$is_SU

# Lasso with cross-validation
cvfit <- cv.glmnet(X_train, y_train, family = "binomial", alpha = 1)
best_lambda <- cvfit$lambda.min

# See which variables are kept
selected_vars <- coef(cvfit, s = best_lambda)
selected_vars

```

```{r}
glm_model <- glm(
  is_SU ~ term_units_c + prev_semGPA_c + studied_away +
    took_summer_courses + is_art_humanity + is_social_sci + unknown + semester_num + timeperiod,
  data = train_df,
  family = binomial
)

summary(glm_model)
```

```{r}
exp(coef(glm_model))
exp(confint(glm_model))
```

```{r}
# Evaluate performance
test_df$pred_prob <- predict(glm_model, newdata = test_df, type = "response")

roc_obj <- roc(test_df$is_SU, test_df$pred_prob)
auc(roc_obj)
```

```{r}
library(lme4)
glmm_model <- glmer(is_SU ~ term_units_c + prev_semGPA_c + early_grad + studied_away +
        took_summer_courses + is_art_humanity + is_social_sci + unknown +
        semester_num + timeperiod + (1 | masked_student_ID),
      data = train_df, family = binomial)
```
