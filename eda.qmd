---
title: "EDA"
format: pdf
editor: visual
author: Sophia Yang
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(viridis)
```

```{r}
#| label: load in data
df <- readRDS("data/final.rds")
df_away <- readRDS("data/6-numplans.rds")
df_summer <- readRDS("data/7-abroad.rds")
```

List of all variables of interest

-   student_acad_prog

-   academic_level_bot

-   first_major

-   second_major

-   term_enrolled

-   division

-   catalog_level

-   max_units

-   class_component

-   final_grade

-   student_group

-   total_enrolled (invalid)

-   year_enrolled

-   is_SU

-   timeperiod

-   num_plans

-   studied_away

-   took_summer_courses

-   term_units

-   semester_num

-   num_overloads

-   total_overloads

-   early_grad

-   is_art_humanity

-   is_social_sci

-   is_natural_sci

-   is_engr

-   prev_semGPA

-   did_indep_study

## Differences Between Student Groups

```{r}
df2_props <- df |>
  group_by(masked_student_ID) |>
  mutate(total_num_SU = sum(is_SU, na.rm = TRUE)) |>
  ungroup() |>
  count(student_group, student_acad_prog, total_num_SU) |>
  group_by(student_acad_prog, student_group) |>
  mutate(prop = n / sum(n)) |>
  ungroup() |>
  mutate(has_SU = ifelse(total_num_SU > 0, "Has S/U", "Never S/U"))

ggplot(df2_props, aes(
    x = student_group,
    y = prop,
    color = factor(total_num_SU),
    group = total_num_SU
  )) +
  geom_line() +
  geom_point() +
  facet_grid(vars(student_acad_prog), vars(has_SU)) +
  theme_minimal() +
  labs(
    title = "Proportion of Students by Group and Total S/U Courses",
    x = "Student Group", y = "Proportion",
    color = "Total S/U Courses"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
df2_props <- df |>
  group_by(masked_student_ID) |>
  ungroup() |>
  count(student_group, student_acad_prog, num_overloads) |>
  group_by(student_acad_prog, student_group) |>
  mutate(prop = n / sum(n)) |>
  ungroup()

ggplot(df2_props, aes(
  x = student_group,
  y = prop,
  color = factor(num_overloads),
  group = num_overloads
)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ student_acad_prog) +
  theme_minimal() +
  labs(
    title = "Proportion of Students by Group and Overloads",
    x = "Student Group", y = "Proportion",
    color = "Total Overloads"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df2_props <- df |>
  group_by(masked_student_ID) |>
  ungroup() |>
  count(student_group, student_acad_prog, num_plans) |>
  group_by(student_acad_prog, student_group) |>
  mutate(prop = n / sum(n)) |>
  ungroup()

ggplot(df2_props, aes(
  x = student_group,
  y = prop,
  color = factor(num_plans),
  group = num_plans
)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ student_acad_prog) +
  theme_minimal() +
  labs(
    title = "Proportion of Students by Group and Overloads",
    x = "Student Group", y = "Proportion",
    color = "Number of Academic Plans"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_audit <- df |>
  group_by(masked_student_ID, student_group, student_acad_prog) |>
  summarise(
    total_audit = sum(final_grade %in% c("AD", "WA"), na.rm = TRUE),
    .groups = "drop"
  )

df_audit_counts <- df_audit |>
  count(student_group, student_acad_prog, total_audit) |>
  group_by(student_acad_prog, total_audit) |>
  mutate(prop = n / sum(n)) |>
  ungroup()

ggplot(df_audit_counts, aes(x = student_group, y = prop)) +
  geom_col() +
  facet_grid(total_audit ~ student_acad_prog, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Distribution of Students by Group and Total Audit Courses",
    x = "Student Group",
    y = "Proportion",
    fill = "Student Group"
  )
```

```{r}
df |>
  mutate(studied_away = if_else(is.na(studied_away), FALSE, studied_away)) |>
  distinct(masked_student_ID, .keep_all = TRUE) |>
  ggplot(aes(x = student_group)) +
  geom_bar() +
  facet_grid(student_acad_prog ~ studied_away, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Studied Away by Student Group and Academic Program",
    x = "Student Group", y = "Count"
  )
```

```{r}
df |>
  distinct(masked_student_ID, .keep_all = TRUE) |>
  ggplot(aes(x = student_group)) +
  geom_bar() +
  facet_grid(student_acad_prog ~ did_indep_study, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Independent Study by Student Group and Academic Program",
    x = "Student Group", y = "Count"
  )
```

```{r}
df |>
  distinct(masked_student_ID, .keep_all = TRUE) |>
  ggplot(aes(x = student_group)) +
  geom_bar() +
  facet_grid(student_acad_prog ~ early_grad, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Early Graduation by Student Group and Academic Program",
    x = "Student Group", y = "Count"
  )
```

```{r}
df |>
  distinct(masked_student_ID, .keep_all = TRUE) |>
  ggplot(aes(x = student_group)) +
  geom_bar() +
  facet_grid(student_acad_prog ~ took_summer_courses, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Summer Courses by Student Group and Academic Program",
    x = "Student Group", y = "Count"
  )
```

## Course Trends over Terms

```{r}
df_course_counts <- df |>
  group_by(term_enrolled, course_ID) |>
  summarise(
    enrollment_count = n(),
    .groups = "drop"
  )

ggplot(df_course_counts, aes(x = term_enrolled, y = enrollment_count)) +
  geom_boxplot(fill = "#1f77b4") +
  theme_minimal() +
  labs(
    title = "Course Enrollment Distribution by Term",
    x = "Term", y = "Number of Students"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(df_course_counts, aes(x = term_enrolled, y = enrollment_count)) +
  geom_boxplot(fill = "#1f77b4") +
  theme_minimal() +
  labs(
    title = "Course Enrollment Distribution by Term",
    x = "Term", y = "Number of Students"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_cartesian(ylim = c(0, 100))
```

```{r}
letter_grades <- c("A+", "A", "A-", 
                   "B+", "B", "B-", 
                   "C+", "C", "C-", 
                   "D+", "D", "D-", 
                   "F")

df_course_SU <- df |>
  group_by(term_enrolled, course_ID, division) |>
  summarise(
    n_total = n(),
    n_letter = sum(final_grade %in% letter_grades, na.rm = TRUE),
    n_SU = sum(final_grade %in% c("S", "U"), na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    prop_letter = n_letter / n_total,
    prop_SU = n_SU / n_total,
    SU_required = prop_letter == 0,
    all_graded = prop_SU == 0
  )


df_term_summary <- df_course_SU |>
  group_by(term_enrolled) |>
  summarise(
    n_courses = n(),
    n_all_graded = sum(all_graded, na.rm = TRUE),
    n_SU_required = sum(SU_required, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    prop_all_graded = n_all_graded / n_courses,
    prop_SU_required = n_SU_required / n_courses,
    prop_partial = 1- prop_all_graded - prop_SU_required
  )

df_term_long <- df_term_summary |>
  select(term_enrolled, prop_all_graded, prop_SU_required, prop_partial) |>
  pivot_longer(
    cols = starts_with("prop"),
    names_to = "type",
    values_to = "proportion"
  ) |>
  mutate(
    type = recode(type,
                  prop_all_graded = "All Graded",
                  prop_SU_required = "S/U Required",
                  prop_partial = "At least 1 S/U")
  )

ggplot(df_term_long, aes(x = term_enrolled, y = proportion, 
                         color = type, group = type)) +
  geom_line() +
  geom_point() +
  scale_color_manual(values = c(
    "All Graded" = "darkblue",
    "S/U Required" = "green",
    "At least 1 S/U" = "lightgray"
  )) +
  theme_minimal() +
  labs(
    title = "Proportion of Courses by Grading Requirement",
    x = "Term", 
    y = "Proportion of Courses",
    color = "Course Type"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}

df_term_div_summary <- df_course_SU |>
  group_by(term_enrolled, division) |>
  summarise(
    n_courses = n(),
    n_all_graded = sum(all_graded, na.rm = TRUE),
    n_SU_required = sum(SU_required, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    prop_all_graded = n_all_graded / n_courses,
    prop_SU_required = n_SU_required / n_courses,
    prop_partial = 1- prop_all_graded - prop_SU_required
  )

df_term_div_long <- df_term_div_summary |>
  select(term_enrolled, division, prop_all_graded, prop_SU_required, 
         prop_partial, n_courses) |>
  pivot_longer(
    cols = starts_with("prop"),
    names_to = "type",
    values_to = "proportion"
  ) |>
  mutate(
    type = recode(type,
                  prop_all_graded = "All Graded",
                  prop_SU_required = "S/U Required",
                  prop_partial = "At least 1 S/U")
  )

ggplot(df_term_div_long, aes(x = term_enrolled, y = proportion, 
                             color = type, group = type)) +
  geom_line() +
  geom_point() +
  scale_color_manual(values = c(
    "All Graded" = "darkblue",
    "S/U Required" = "green",
    "At least 1 S/U" = "lightgray"
  )) +
  facet_wrap(~ division) +
  theme_minimal() +
  labs(
    title = "Proportion of Courses by Grading Requirement",
    x = "Term",
    y = "Proportion of Courses",
    color = "Course Type"
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        legend.position = "bottom")
```

```{r}
df_div_summary <- df |>
  group_by(term_enrolled, division) |>
  summarise(num_courses = n_distinct(course_ID), .groups = "drop")

ggplot(df_div_summary, aes(x = term_enrolled, y = num_courses,
                           color = division, group = division)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(
    title = "Number of Courses by Division Over Time",
    x = "Term",
    y = "Number of Courses",
    color = "Division"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
df_class_sizes <- df |>
  group_by(term_enrolled, course_ID, division) |>
  summarise(
    class_size = n(),
    .groups = "drop"
  )

df_div_summary <- df_class_sizes |>
  group_by(term_enrolled, division) |>
  summarise(
    mean_size = mean(class_size),
    sd_size   = sd(class_size),
    n_classes = n(),
    .groups = "drop"
  ) |>
  mutate(
    se = sd_size / sqrt(n_classes),
    lower = mean_size - 1.96 * se,
    upper = mean_size + 1.96 * se
  )

ggplot(df_div_summary, aes(x = term_enrolled, y = mean_size,
                           color = division, group = division)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  theme_minimal() +
  labs(
    title = "Average Class Size by Division Over Time",
    x = "Term",
    y = "Average Class Size",
    color = "Division"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

df_div_summary |>
  filter(division != "WRITING") |>
  ggplot(aes(x = term_enrolled, y = mean_size, 
               color = division, group = division)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  theme_minimal() +
  labs(
    title = "Average Class Size by Division (excluding WRITING)",
    x = "Term",
    y = "Average Enrollment"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Relationships with Student Academic Status/# Semesters

```{r}
ggplot(df, aes(x = catalog_level, y = after_stat(prop), 
               group = academic_level_bot)) +
  geom_bar() +
  facet_wrap(~academic_level_bot) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    y = "Proportion",
    x = "Catalog Level",
    title = "Proportion of Courses by Catalog Level and Academic Level"
  )
```

```{r}
df_fallspring <- df |>
  filter(str_detect(term_enrolled, "Fall|Spring")) |>
  mutate(term_semester = str_extract(term_enrolled, "Fall|Spring")) |>
  count(catalog_level, term_semester, academic_level_bot) |>
  group_by(term_semester, academic_level_bot) |>
  mutate(prop = n / sum(n)) |>
  ungroup()

ggplot(df_fallspring, aes(
  x = catalog_level,
  y = prop,
  fill = catalog_level
)) +
  geom_col() +
  facet_grid(academic_level_bot ~ term_semester, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Proportion of Enrollments by Academic Level and Semester",
    x = "Catalog Level", y = "Proportion"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  )
```

```{r}
df_year <- df |>
  mutate(
    term_year = str_sub(term_enrolled, -4, -1) |> as.integer()
  )

ggplot(df_year, aes(x = term_year, fill = catalog_level)) +
  geom_bar(position = "fill") +
  facet_wrap(~ academic_level_bot) +
  theme_minimal() +
  labs(
    title = "Distribution of Catalog Levels Over Time",
    x = "Year", y = "Proportion", fill = "Catalog Level"
  )
```

```{r}
df_year <- df |>
  mutate(
    term_year = str_sub(term_enrolled, -4, -1) |> as.integer()
  )

ggplot(df_year, aes(x = term_year, fill = catalog_level)) +
  geom_bar(position = "fill") +
  facet_wrap(~ semester_num) +
  theme_minimal() +
  labs(
    title = "Distribution of Levels By Number of Semsters",
    x = "Year", y = "Proportion", fill = "Catalog Level"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Relation summer and overloads

Relation studied away and summer

## S/U

```{r}
df_SU <- df |>
  group_by(masked_student_ID, student_group, student_acad_prog) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}
ggplot(df_SU, aes(x = factor(student_group), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ student_acad_prog, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Distribution of Total S/U Courses per Student",
    x = "Student Group",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, student_acad_prog, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ student_acad_prog, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Distribution of Total S/U Courses per Academic Program",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, division, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ division, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Distribution of Total S/U Courses per Division",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_divisions_unique <- df |>
  group_by(masked_student_ID) |>
  mutate(
    num_divisions = is_art_humanity + is_social_sci + is_natural_sci + is_engr,
    division = case_when(
      num_divisions != 1        ~ NA_character_, # only keep students with 1 division
      is_art_humanity == 1      ~ "Arts & Humanities",
      is_social_sci == 1        ~ "Social Sciences",
      is_natural_sci == 1       ~ "Natural Sciences",
      is_engr == 1              ~ "Engineering"
    )
  ) |>
  filter(!is.na(division)) |>
  select(masked_student_ID, division)

df_SU_unique <- df_SU |>
  group_by(masked_student_ID, student_group, student_acad_prog, total_SU, has_ever_SU) |>
  summarise(.groups = "drop")

df_SU_single_div <- df_SU_unique |>
  left_join(df_divisions_unique, by = "masked_student_ID")


ggplot(df_SU_single_div, aes(x = factor(student_group), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ division, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Total S/U Courses by Student's Division (Single Division Only)",
    x = "Student Group",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, catalog_level, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ catalog_level, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Total S/U Courses by Catalog Level",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, studied_away, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ studied_away, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Total S/U Courses by Study Away Status",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, took_summer_courses, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ took_summer_courses, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Total S/U Courses by Summer Course Status",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
df_SU2 <- df |>
  group_by(masked_student_ID, num_overloads, year_enrolled) |>
  summarise(
    total_SU = sum(as.logical(is_SU), na.rm = TRUE),
    has_ever_SU = any(as.logical(is_SU), na.rm = TRUE),
    .groups = "drop"
  )

ggplot(df_SU2, aes(x = factor(year_enrolled), y = total_SU)) +
  geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
  facet_wrap(~ num_overloads, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Total S/U Courses by Current Number of Overloads",
    x = "Academic Year",
    y = "Total S/U Courses",
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## More plots to organize...

```{r}
df_away <- df_away |>
  filter(!is.na(location), location != "DURHAM", location != "ONLINE")

df_summer <- df_summer |>
  filter(str_starts(term_enrolled, "Summer"))

ggplot(df_away, aes(x = academic_level_bot)) +
  geom_bar(fill = "steelblue", color = "white") +
  theme_minimal() +
  labs(
    title = "When do Students Study Away?",
    x = "Academic Level",
    y = "Count of Students"
  )

ggplot(df_summer, aes(x = academic_level_bot)) +
  geom_bar(fill = "steelblue", color = "white") +
  theme_minimal() +
  labs(
    title = "When do Students Take Summer Courses?",
    x = "Academic Level",
    y = "Count of Students"
  )
```

```{r}

# ---- Step 1: Summarize student-level grades to course-level ----
course_summary <- df |>
  group_by(course_ID, term_enrolled, timeperiod) |>
  summarise(
    n = n(),
    n_AF = sum(final_grade %in% c("A+", "A", "A-", "B+", "B", "B-", 
                            "C+", "C", "C-", "D+", "D", "D-", "F")),
    n_SU = sum(final_grade %in% c("S", "U")),
    n_W  = sum(final_grade == "W"),
    .groups = "drop"
  ) |>
  mutate(
    p_AF = n_AF / n,
    p_SU = n_SU / n,
    p_W  = n_W / n,
    no_AF = (n_AF == 0),   # binary
    no_SU = (n_SU == 0),    # binary
    timeperiod = factor(timeperiod, 
                        levels = c("pre_covid", "dur_covid", "post_covid"))
  )

# ---- Step 2: No AF / No SU plot with SE bars ----
binary_summary <- course_summary |>
  pivot_longer(c(no_AF, no_SU), names_to = "metric", values_to = "value") |>
  group_by(timeperiod, metric) |>
  summarise(
    mean = mean(value),
    se   = sqrt(mean * (1 - mean) / n()),  # binomial SE
    .groups = "drop"
  )

p_noAF_SU <- ggplot(binary_summary, aes(x = timeperiod, y = mean, 
                                        color = metric, group = metric)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
  theme_minimal() +
  labs(title = "Proportion of Courses with No AF or No SU Grades",
       y = "Proportion")

# ---- Step 3: High SU / High W threshold plots ----
thresholds <- c(0.05, 0.10, 0.25)

threshold_summary <- course_summary |>
  tidyr::crossing(threshold = thresholds) |>
  mutate(
    high_SU = (p_SU >= threshold),
    high_W  = (p_W  >= threshold)
  ) |>
  pivot_longer(c(high_SU, high_W), names_to = "metric", values_to = "value")

# --- (A) Course-weighted version with SE bars ---
threshold_courses <- threshold_summary |>
  group_by(timeperiod, metric, threshold) |>
  summarise(
    prop = mean(value),
    n_courses = n(),
    se   = sqrt(prop * (1 - prop) / n_courses),  # binomial SE
    .groups = "drop"
  ) |>
  mutate(weighting = "Course-weighted")

# --- (B) Student-weighted version (weighted by course size, no SE) ---
threshold_students <- threshold_summary |>
  group_by(timeperiod, metric, threshold) |>
  summarise(
    prop = weighted.mean(value, w = n),
    .groups = "drop"
  ) |>
  mutate(weighting = "Student-weighted",
         se = NA)  # SE not meaningful for weighted students

# Combine both
threshold_combined <- bind_rows(threshold_courses, threshold_students)

p_highSU_highW <- ggplot(threshold_combined, 
                         aes(x = timeperiod, y = prop, 
                             color = factor(threshold), group = threshold)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = prop - se, ymax = prop + se), width = 0.2,
                data = threshold_combined |> filter(weighting == "Course-weighted")) +
  facet_grid(metric ~ weighting, scales = "free_y",
             labeller = labeller(weighting = c(
               "Course-weighted" = "Proportion of Courses",
               "Student-weighted" = "Proportion of Students"),
               metric = c(
                 "high_SU" = "High S/U",
                 "high_W"  = "High W"
               ))) +
  theme_minimal() +
  labs(title = "High S/U and High W Thresholds by Weighting Scheme",
       y = NULL,
       color = "Threshold")

# ---- Step 4: Print or save plots ----
p_noAF_SU
p_highSU_highW

```

```{r}
enrollment_summary <- df |>
  group_by(course_ID, term_enrolled, timeperiod) |>
  summarise(
    total_enrollment = n(),  # number of students in the course
    n_AF = sum(final_grade %in% c("A+", "A", "A-", "B+", "B", "B-", 
                            "C+", "C", "C-", "D+", "D", "D-", "F")),
    no_AF = (n_AF == 0),
    .groups = "drop"
  ) |>
  filter(no_AF) |>  # keep only courses without A–F
  group_by(timeperiod) |>
  summarise(
    avg_enrollment = mean(total_enrollment),
    sd_enrollment  = sd(total_enrollment),
    n_courses      = n(),
    se_enrollment  = sd_enrollment / sqrt(n_courses),
    .groups = "drop"
  ) |>
  mutate(
    timeperiod = factor(timeperiod, levels = c("pre_covid", "dur_covid", "post_covid"))
  )

ggplot(enrollment_summary, aes(x = timeperiod, y = avg_enrollment, group = 1)) +
  geom_line(color = "steelblue") +
  geom_point(color = "steelblue") +
  geom_errorbar(aes(ymin = avg_enrollment - se_enrollment,
                    ymax = avg_enrollment + se_enrollment), width = 0.2) +
  theme_minimal() +
  labs(
    title = "Average Class Size in Courses Without A–F Grades Over Time",
    x = "Timeperiod",
    y = "Average Enrollment",
    caption = "Error bars = standard error of the mean"
  )
```

```{r}
withdrawal_summary <- df |>
  group_by(course_ID, term_enrolled, timeperiod) |>
  summarise(
    total_enrollment = n(),
    n_AF = sum(final_grade %in% c("A+", "A", "A-", "B+", "B", "B-", 
                            "C+", "C", "C-", "D+", "D", "D-", "F")),
    n_W  = sum(final_grade == "W"),
    no_AF = (n_AF == 0),
    prop_W = n_W / n(),
    .groups = "drop"
  ) |>
  mutate(course_group = ifelse(no_AF, "No A–F grades", "Has A–F grades"))

withdrawal_summary_by_term <- withdrawal_summary |>
  group_by(timeperiod, course_group) |>
  summarise(
    mean_W = mean(prop_W),
    se_W   = sd(prop_W) / sqrt(n()),
    n_courses = n(),
    .groups = "drop"
  ) |>
  mutate(timeperiod = factor(timeperiod, levels = c("pre_covid", "dur_covid", "post_covid")))

ggplot(withdrawal_summary_by_term, aes(x = timeperiod, y = mean_W, 
                                       color = course_group, group = course_group)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = mean_W - se_W, ymax = mean_W + se_W), width = 0.2) +
  theme_minimal() +
  labs(
    title = "Withdrawal Proportions by Course Type Across Timeperiods",
    x = "Timeperiod",
    y = "Average Withdrawal Proportion",
    color = "Course Type"
  )
```
