---
title: "Data Playground"
format: pdf
editor: visual
author: Sophia Yang
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| include: false

library(readxl)
library(tidyverse)
```

## Load Data

```{r}
#| label: load-data

file1 <- read_excel("J:/Individual Working Folders/Research Assistants/Yang, Sophia/exported data for project, terms 1400 to 1605.xlsx", 
                    guess_max = 100000)

file2 <- read_excel("J:/Individual Working Folders/Research Assistants/Yang, Sophia/exported data for project, terms 1610 and forward.xlsx", 
                    guess_max = 10000)

combined_df <- rbind(file1, file2) |>
  mutate(
    admit_term = as.numeric(admit_term),
    term_enrolled = as.numeric(term_enrolled),
    catalog_level = na_if(catalog_level, "unknown")
  )

glimpse(combined_df)
```

## Data Notes

-   There are ``` {r}``n_distinct(combined_df$masked_student_ID) ``` distinct students.

-   The dataset contains data from Summer 2012 (Term `{r} min(combined_df$term_enrolled)`) to Spring 2025 (Term `{r} max(combined_df$term_enrolled)`).

-   The suffix "U" for `student_acad_prog` represents "undeclared". This can already be obtained from looking at `first_major`.

    ```{r}
    #| label: undeclared-check

    all(combined_df$student_acad_prog != "A&SU" |
          is.na(combined_df$first_major))
    all(combined_df$student_acad_prog != "E-UGU" |
          is.na(combined_df$first_major))
    ```

-   All students in this dataset are undergraduates.

    ```{r}
    #| label: career-check

    combined_df |> distinct(career)
    ```

-   I know what all values for `final_grade` are except N (74), TNC (3), and Z (2).

    ```{r}
    #| label: final-grades

    final_grades <- combined_df |>
      count(final_grade) |>
      mutate(prop = n / sum(n)) |>
      arrange(n)
    print(final_grades, n = Inf)
    ```

-   I know what all values for `class_component` mean.

    ```{r}
    #| label: class_component

    class_components <- combined_df |>
      count(class_component) |>
      mutate(prop = n / sum(n)) |>
      arrange(n)
    print(class_components, n = Inf)
    ```

-   Missingness prior to data cleaning:

    ```{r}
    #| label: missing-data-before

    missing_summary <- combined_df |>
      summarise(across(
        everything(),
        list(
          n_missing = ~sum(is.na(.)),
          prop_missing = ~mean(is.na(.))
        ),
        .names = "{.col}-{.fn}"
      )) |>
      pivot_longer(
        everything(),
        names_to = c("variable", ".value"),
        names_sep = "-"
      ) |>
      arrange(desc(n_missing))
              
    print(missing_summary, n = Inf)
    ```

    Inclined to drop certificates and second minor (at minimum). Could I create a new variable called number of academic plans?

```{r}
#| label: clean-data

clean_df <- combined_df |> 
  mutate(
    student_acad_prog = ifelse(str_starts(student_acad_prog, "A&S"), 
                               "Trinity", "Pratt"),
    course_crosslisted = replace_na(course_crosslisted, 0)
    ) |>
  select(-career)
```

```{r}
#| label: term-codes

term_lookup <- tribble(
  ~term_number,  ~term_year,  ~term_type,
  0010,          1965,        "Prior Terms",
  0120,          1984,        "Summer 1",
  0280,          1992,        "Spring",
  0320,          1992,        "Fall",
  0500,          1995,        "Fall",
  0620,          1997,        "Fall",
  0680,          1998,        "Fall",
  0740,          1999,        "Fall",
  0800,          2000,        "Fall",
  0905,          2002,        "Summer 2",
  0920,          2002,        "Fall",
  0980,          2003,        "Fall",
  1040,          2004,        "Fall",
  1115,          2005,        "Fall",
  1165,          2006,        "Summer 2",
  1180,          2006,        "Fall",
  1220,          2007,        "Fall",
  1230,          2008,        "Spring",
  1245,          2008,        "Summer 1",
  1250,          2008,        "Summer 2",
  1260,          2008,        "Fall",
  1270,          2009,        "Spring",
  1280,          2009,        "Summer Full",
  1285,          2009,        "Summer 1",
  1290,          2009,        "Summer 2",
  1300,          2009,        "Fall",
  1310,          2010,        "Spring",
  1325,          2010,        "Summer 1",
  1330,          2010,        "Summer 2",
  1340,          2010,        "Fall",
  1350,          2011,        "Spring",
  1365,          2011,        "Summer 1",
  1370,          2011,        "Summer 2",
  1380,          2011,        "Fall",
  1390,          2012,        "Spring",
  1400,          2012,        "Summer Full",
  1405,          2012,        "Summer 1",
  1410,          2012,        "Summer 2",
  1420,          2012,        "Fall",
  1425,          2013,        "Winter",
  1430,          2013,        "Spring",
  1440,          2013,        "Summer Full",
  1445,          2013,        "Summer 1",
  1450,          2013,        "Summer 2",
  1460,          2013,        "Fall",
  1465,          2014,        "Winter",
  1470,          2014,        "Spring",
  1480,          2014,        "Summer Full",
  1485,          2014,        "Summer 1",
  1490,          2014,        "Summer 2",
  1500,          2014,        "Fall",
  1505,          2015,        "Winter",
  1510,          2015,        "Spring",
  1520,          2015,        "Summer Full",
  1525,          2015,        "Summer 1",
  1530,          2015,        "Summer 2",
  1540,          2015,        "Fall",
  1545,          2016,        "Winter",
  1550,          2016,        "Spring",
  1565,          2016,        "Summer 1",
  1570,          2016,        "Summer 2",
  1580,          2016,        "Fall",
  1585,          2017,        "Winter",
  1590,          2017,        "Spring",
  1605,          2017,        "Summer 1",
  1610,          2017,        "Summer 2",
  1620,          2017,        "Fall",
  1625,          2018,        "Winter",
  1630,          2018,        "Spring",
  1645,          2018,        "Summer 1",
  1650,          2018,        "Summer 2",
  1660,          2018,        "Fall",
  1665,          2019,        "Winter",
  1670,          2019,        "Spring",
  1685,          2019,        "Summer 1",
  1690,          2019,        "Summer 2",
  1700,          2019,        "Fall",
  1705,          2020,        "Winter",
  1710,          2020,        "Spring",
  1725,          2020,        "Summer 1",
  1730,          2020,        "Summer 2",
  1740,          2020,        "Fall",
  1745,          2021,        "Winter",
  1750,          2021,        "Spring",
  1765,          2021,        "Summer 1",
  1770,          2021,        "Summer 2",
  1780,          2021,        "Fall",
  1785,          2022,        "Winter",
  1790,          2022,        "Spring",
  1805,          2022,        "Summer 1",
  1810,          2022,        "Summer 2",
  1820,          2022,        "Fall",
  1825,          2023,        "Winter",
  1830,          2023,        "Spring",
  1845,          2023,        "Summer 1",
  1850,          2023,        "Summer 2",
  1860,          2023,        "Fall",
  1865,          2024,        "Winter",
  1870,          2024,        "Spring",
  1885,          2024,        "Summer 1",
  1890,          2024,        "Summer 2",
  1900,          2024,        "Fall",
  1905,          2025,        "Winter",
  1910,          2025,        "Spring"
)

term_encoding <- c(
  "Winter" = 1,
  "Spring" = 2,
  "Summer Full" = 3,
  "Summer 1" = 4,
  "Summer 2" = 5,
  "Fall" = 6
)

clean_term_df <- clean_df |>
  left_join(
    term_lookup |> rename(
      term_year_enrolled = term_year,
      term_type_enrolled = term_type
    ),
    by = c("term_enrolled" = "term_number")
  ) |>
  left_join(
    term_lookup |> rename(
      term_year_admit = term_year,
      term_type_admit = term_type
    ),
    by = c("admit_term" = "term_number")
  )

final_term_df <- clean_term_df |>
  mutate(
    term_type_index = term_encoding[term_type_enrolled],
    term_enrolled_index = term_year_enrolled + term_type_index/10
  ) |>
  mutate(
    term_type_index = term_encoding[term_type_admit],
    term_admit_index = term_year_admit + term_type_index/10
  ) |>
  select(-c(term_type_index, term_year_enrolled, term_type_enrolled,
            term_year_admit, term_type_admit, admit_term, term_enrolled))
```

```{r}
#| label: create-variables

new_vars_df <- final_term_df |>
  mutate(
    is_SU = if_else(final_grade %in% c("S", "U"), 1, 0),
    has_BS = if_else(
      str_ends(first_major, "BS") | 
        str_ends(second_major, "BS"), 
      1, 0
    ),
    pre_covid = if_else(
      term_enrolled_index < 2020.2,
      1, 0
    ),
    post_covid = if_else(
      term_enrolled_index > 2022.5,
      1, 0
    ),
    covid = if_else(pre_covid == 0 & post_covid == 0, 1, 0)
  )
  
new_vars_df <- new_vars_df |>
  group_by(term_enrolled_index, class_nbr_rev) |>
  mutate(total_students_in_course = if_else(
    is.na(class_nbr_rev), 
    as.numeric(NA),
    n_distinct(masked_student_ID))
  ) |>
  ungroup()
```

```{r}
#| label: GPA

grade_points <- c(
  "A+" = 4.0, "A" = 4.0, "A-" = 3.7,
  "B+" = 3.3, "B" = 3.0, "B-" = 2.7,
  "C+" = 2.3, "C" = 2.0, "C-" = 1.7,
  "D+" = 1.3, "D" = 1.0, "D-" = 1.0,
  "F" = 0.0
)

# One row per student per semester
semGPA_df <- new_vars_df |>
  mutate(
    grade_points = grade_points[final_grade],
    term_decimal = term_enrolled_index %% 1
  ) |>
  filter(term_decimal %in% c(0.2, 0.6)) |> # only spring and fall
  group_by(masked_student_ID, term_enrolled_index) |>
  summarize(
    semGPA = mean(grade_points, na.rm = TRUE),
    .groups = "drop"
  )

prevGPA_df <- semGPA_df |>
  arrange(masked_student_ID, term_enrolled_index) |>
  group_by(masked_student_ID) |>
  mutate(prev_semGPA = lag(semGPA)) |>
  ungroup()

final_df <- new_vars_df |>
  left_join(
    prevGPA_df |> 
      select(masked_student_ID, term_enrolled_index, prev_semGPA),
    by = c("masked_student_ID", "term_enrolled_index")
  )
```

Transfer students? Drop outs? Early grad? Variable for \# of overloads or \# of credits?

Data dictionary

| Variable name | Type | Description |
|------------------|------------------|------------------------------------|
| masked_student_ID | numerical |  |
| student_acad_prog |  |  |
| first_major |  | final values at graduation, may not reflect values at time of taking course |
| ... |  |  |
|  |  |  |
| admit_term |  |  |
| term_enrolled |  |  |
| term_type | Summer vs acad year |  |
| division_of_course |  |  |
| catalog_level |  |  |
| class_nbr_rev |  |  |
|  |  |  |

```{r}
#| label: without-summer
# do similar analysis but drop summer terms?
```

```{r}
#| label: eda-enrollment

plot_df <- final_df |>
  group_by(term_enrolled_index) |>
  summarise(
    n_students = n_distinct(masked_student_ID),
    .groups = "drop"
  ) |>
  arrange(term_enrolled_index)

ggplot(plot_df, aes(x = factor(term_enrolled_index), y = n_students)) +
  geom_col() +
  labs(
    title = "Number of Students per Term",
    x = "Term Enrolled",
    y = "Number of Students"
  ) +
  theme_minimal()

```

```{r}
#| label: eda-su

prop_df <- final_df |>
  group_by(term_enrolled_index) |>
  summarise(prop_passfail = mean(is_SU), .groups = "drop") |>
  mutate(highlight = if_else(term_enrolled_index == 2020.2, "highlight", "other"))

count_df <- final_df |>
  group_by(term_enrolled_index) |>
  summarise(
  passfail_count = sum(is_SU),
  total = n(),
    .groups = "drop"
  ) |>
  mutate(highlight = if_else(term_enrolled_index == 2020.2, "highlight", "other"))

ggplot(prop_df, aes(x = term_enrolled_index, y = prop_passfail)) +
  geom_col() +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_fill_manual(values = c("highlight" = "red", "other" = "gray")) +
  labs(
    title = "Proportion of S/U Grades by Term",
    x = "Term Enrolled",
    y = "Proportion (S/U)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

ggplot(count_df, aes(x = term_enrolled_index, y = passfail_count)) +
  geom_col() +
  scale_fill_manual(values = c("highlight" = "red", "other" = "gray")) +
  labs(
    title = "Count of S/U Grades by Term",
    x = "Term Enrolled",
    y = "Count (S/U)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
#| label: eda-grade-dist

grade_prop <- final_df |>
  group_by(term_enrolled_index, final_grade) |>
  summarise(count = n(), .groups = "drop_last") |>
  mutate(prop = count / sum(count))

ggplot(grade_prop, aes(x = term_enrolled_index, y = prop, fill = final_grade)) +
  geom_col(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Distribution of Grades by Term",
    x = "Term Enrolled",
    y = "Proportion of Grades",
    fill = "Grade"
  ) +
  theme_minimal()
```

```{r}
#| label: eda-gpa

prevGPA_df |>
  group_by(term_enrolled_index) |>
  summarise(
    avg_semGPA = mean(semGPA, na.rm = TRUE),
    .groups = "drop"
  ) |>
  ggplot(aes(x = term_enrolled_index, y = avg_semGPA)) +
  geom_line() +
  labs(
    title = "Average Semester GPA Over Time",
    x = "Term Index",
    y = "Average GPA"
  ) +
  theme_minimal()
```

```{r}
model <- glm(is_SU ~ term_enrolled_index + catalog_level + division_of_course + class_component + student_acad_prog, 
             data = final_df, family = binomial)
summary(model)
```
